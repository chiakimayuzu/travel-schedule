"""
Django settings for travel_schedule project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-eso)61)wpixj7o*2(i5-52g=5_w!im8l1zpjwe3c)nhlqwdm^w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'travelapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]   

# 3. メッセージ設定を追加
MESSAGE_LEVEL = 20  # DEBUG メッセージレベル（エラーを表示）

ROOT_URLCONF = 'travel_schedule.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {    
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'travel_schedule.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# 静的ファイルがプロジェクト内のどこにあるか指定するオプション
STATICFILES_DIRS = [
    BASE_DIR / "static",  # プロジェクトの static フォルダ
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_REDIRECT_URL = 'travelapp:home'  # ログイン成功後のリダイレクト先
LOGOUT_REDIRECT_URL = 'travelapp:home'  # ログアウト後のリダイレクト先

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# セッション有効期限（秒単位、例: 1日）
SESSION_COOKIE_AGE = 86400  # 1日
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # ブラウザ終了時にセッション削除

AUTH_USER_MODEL = "travelapp.User"

LOGGING = {
    "version": 1,  # ログ設定のバージョン（基本的に1のままでOK）
    "disable_existing_loggers": False,  # 既存のログ設定を無効化しない

    "handlers": {  # ログの出力方法（ハンドラー）を定義
        "console": {  # "console" という名前のハンドラーを作成
            "level": "DEBUG",  # DEBUG レベル以上のログを記録
            "class": "logging.StreamHandler",  # ログを標準出力（ターミナル）に表示
        },
    },

    "loggers": {  # どの種類のログを記録するかを設定
        "django.db.backends": {  # データベース関連のログを記録
            "handlers": ["console"],  # 上で定義した "console" ハンドラーを使用
            "level": "DEBUG",  # DEBUG レベル以上のログを記録
        },
    },
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# .envファイルを明示的に指定
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv()

# 環境変数からAPIキーを取得
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")

